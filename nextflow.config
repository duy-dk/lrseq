params {
    input = null
    outdir = null
}

includeConfig 'conf/modules.config'
includeConfig 'conf/base.config'

def check_max(obj, type) {                                                                                                                                    
    switch (type) {                                                                                                                                           
        case 'memory':                                                                                                                                        
            try {                                                                                                                                             
                return (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1) ? params.max_memory as nextflow.util.MemoryUnit : obj              
            } catch (all) {                                                                                                                                   
                println "ERROR: Max memory '${params.max_memory}' is not valid! Using default value: $obj"                                                    
                return obj                                                                                                                                    
            }                                                                                                                                                 
        case 'time':                                                                                                                                          
            try {                                                                                                                                             
                return (obj.compareTo(params.max_time as nextflow.util.Duration) == 1) ? params.max_time as nextflow.util.Duration : obj                      
            } catch (all) {                                                                                                                                   
                println "ERROR: Max time '${params.max_time}' is not valid! Using default value: $obj"                                                        
                return obj                                                                                                                                    
            }                                                                                                                                                 
        case 'cpus':                                                                                                                                          
            try {                                                                                                                                             
                return Math.min( obj, params.max_cpus as int )                                                                                                
            } catch (all) {                                                                                                                                   
                println "ERROR: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"                                                        
                return obj                                                                                                                                    
            }                                                                                                                                                 
        default:                                                                                                                                              
            throw new IllegalArgumentException("Invalid type: $type")                                                                                         
    }                                                                                                                                                         
} 
